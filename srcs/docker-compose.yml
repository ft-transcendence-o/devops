version: '3.0'

services:
  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: dockerfile
    volumes:
      - ./certs/nginx/:/etc/nginx/cert/
      - ./nginx/config/:/etc/nginx/conf.d/
      - ./logs/nginx:/var/log/nginx
      - front_data:/usr/share/nginx/html/
    ports:
      - 80:80
      - 443:443
    depends_on:
      - django
    networks:
      - pong

  postgresql:
    container_name: postgresql
    image: postgres:13-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pong
    env_file:
      - .env

  django:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./logs/django:/app/pong/logs
    ports:
      - 8000:8000
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - pong
    env_file:
      - .env

# ######################################### grafana ##########################################

#   prometheus:
#     image: prom/prometheus:v2.53.1
#     container_name: prometheus
#     volumes:
#       - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#       - ./prometheus/cpu_load_alert.yml:/etc/prometheus/cpu_load_alert.yml:ro
#       - prometheus_data:/prometheus
#     command:
#       - '--config.file=/etc/prometheus/prometheus.yml'
#       - '--storage.tsdb.path=/prometheus'
#       - '--storage.tsdb.retention.time=15d'
#       - '--storage.tsdb.retention.size=5GB'
#       - '--web.console.libraries=/usr/share/prometheus/console_libraries'
#       - '--web.console.templates=/usr/share/prometheus/consoles'
#     ports:
#       - 9090:9090
#     restart: always
#     networks:
#       - pong

#   grafana:
#     image: grafana/grafana:11.1.1
#     container_name: grafana
#     volumes:
#       - ./grafana/alerting:/etc/grafana/provisioning/alerting:ro
#       - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
#       - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
#       - ./grafana/access-control:/etc/grafana/provisioning/access-control:ro
#       - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
#       - ./certs/grafana/:/etc/grafana/cert:ro
#       - grafana_data:/var/lib/grafana
#     environment:
#       - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
#     depends_on:
#       - prometheus
#     ports:
#       - 3000:3000
#     restart: always
#     networks:
#       - pong
#     env_file:
#       - .env

#   create-user:
#     image: curlimages/curl:latest
#     container_name: grafana-create-user
#     volumes:
#       - ./grafana/create_users.sh:/create_users.sh
#     entrypoint: ["/bin/sh", "/create_users.sh"]
#     depends_on:
#       - grafana
#     networks:
#       - pong
#     env_file:
#       - .env

#   node-exporter:
#     image: prom/node-exporter:v1.8.2
#     container_name: node-exporter
#     volumes:
#       - /proc:/host/proc:ro
#       - /sys:/host/sys:ro
#       - /:/rootfs:ro
#     command:
#       - '--path.procfs=/host/proc'
#       - '--path.sysfs=/host/sys'
#       - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
#     ports:
#       - 9100:9100
#     restart: always
#     networks:
#       - pong

#   cadvisor:
#     image: gcr.io/cadvisor/cadvisor:v0.49.1
#     container_name: cadvisor
#     volumes:
#       - /:/rootfs:ro
#       - /var/run:/var/run:ro
#       - /sys:/sys:ro
#       - /var/lib/docker/:/var/lib/docker:ro
#       - /dev/disk/:/dev/disk:ro
#     ports:
#       - 8080:8080
#     restart: always
#     networks:
#       - pong

# ############################################ ELK ############################################

#   setup:
#     container_name: elk-setup
#     profiles:
#       - setup
#     build:
#       context: setup/
#       args:
#         ELASTIC_VERSION: ${ELASTIC_VERSION}
#     init: true
#     volumes:
#       - ./setup/entrypoint.sh:/entrypoint.sh:ro
#       - ./setup/lib.sh:/lib.sh:ro
#       - ./setup/roles:/roles:ro
#       # (!) CA certificate. Generate using the 'tls' service.
#       - ./tls/certs/ca/ca.crt:/ca.crt:ro
#     environment:
#       ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
#       LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
#       KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
#       METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
#       FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
#       HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
#       MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
#       BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
#     networks:
#       - pong
#     depends_on:
#       - elasticsearch

#   elasticsearch:
#     container_name: elasticsearch
#     build:
#       context: elasticsearch/
#       args:
#         ELASTIC_VERSION: ${ELASTIC_VERSION}
#     volumes:
#       - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
#       # (!) TLS certificates. Generate using the 'tls' service.
#       - ./tls/certs/ca/ca.crt:/usr/share/elasticsearch/config/ca.crt:ro
#       - ./tls/certs/elasticsearch/elasticsearch.crt:/usr/share/elasticsearch/config/elasticsearch.crt:ro
#       - ./tls/certs/elasticsearch/elasticsearch.key:/usr/share/elasticsearch/config/elasticsearch.key:ro
#       - elasticsearch_data:/usr/share/elasticsearch/data:Z
#     ports:
#       - 9200:9200
#       - 9300:9300
#     environment:
#       node.name: elasticsearch
#       ES_JAVA_OPTS: -Xms512m -Xmx512m
#       # Bootstrap password.
#       # Used to initialize the keystore during the initial startup of
#       # Elasticsearch. Ignored on subsequent runs.
#       ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
#       # Use single node discovery in order to disable production mode and avoid bootstrap checks.
#       # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
#       discovery.type: single-node
#     networks:
#       - pong
#     restart: unless-stopped

#   logstash:
#     container_name: logstash
#     build:
#       context: logstash/
#       args:
#         ELASTIC_VERSION: ${ELASTIC_VERSION}
#     volumes:
#       - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
#       - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
#       # (!) CA certificate. Generate using the 'tls' service.
#       - ./tls/certs/ca/ca.crt:/usr/share/logstash/config/ca.crt:ro
#     ports:
#       - 5044:5044
#       - 50000:50000/tcp
#       - 50000:50000/udp
#       - 9600:9600
#     environment:
#       LS_JAVA_OPTS: -Xms256m -Xmx256m
#       LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
#     networks:
#       - pong
#     depends_on:
#       - elasticsearch
#     restart: unless-stopped

#   kibana:
#     container_name: kibana
#     build:
#       context: kibana/
#       args:
#         ELASTIC_VERSION: ${ELASTIC_VERSION}
#     volumes:
#       - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
#       # (!) TLS certificates. Generate using the 'tls' service.
#       - ./tls/certs/ca/ca.crt:/usr/share/kibana/config/ca.crt:ro
#       - ./tls/certs/kibana/kibana.crt:/usr/share/kibana/config/kibana.crt:ro
#       - ./tls/certs/kibana/kibana.key:/usr/share/kibana/config/kibana.key:ro
#     ports:
#       - 5601:5601
#     environment:
#       KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
#     networks:
#       - pong
#     depends_on:
#       - elasticsearch
#     restart: unless-stopped


#   filebeat:
#     container_name: filebeat
#     build:
#       context: filebeat/
#       args:
#         ELASTIC_VERSION: ${ELASTIC_VERSION}
#     # Run as 'root' instead of 'filebeat' (uid 1000) to allow reading
#     # 'docker.sock' and the host's filesystem.
#     user: root
#     command:
#       # Log to stderr.
#       - -e
#       # Disable config file permissions checks. Allows mounting
#       # 'config/filebeat.yml' even if it's not owned by root.
#       # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
#       - --strict.perms=false
#     volumes:
#       - ./filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
#       - ./logs/django:/var/log/django:ro
#       - ./logs/nginx:/var/log/nginx:ro
#       - type: bind
#         source: /var/lib/docker/containers
#         target: /var/lib/docker/containers
#         read_only: true
#       - type: bind
#         source: /var/run/docker.sock
#         target: /var/run/docker.sock
#         read_only: true
#       # (!) CA certificate. Generate using the 'tls' service.
#       - ./tls/certs/ca/ca.crt:/usr/share/filebeat/ca.crt:ro
#     environment:
#       FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
#       BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
#     networks:
#       - pong
#     depends_on:
#       - elasticsearch
#       - logstash

#   dashboard-setup:
#     container_name: dashboard-setup
#     image: curlimages/curl
#     volumes:
#       - ./kibana/setup-dashboard.sh:/setup-dashboard.sh
#       - ./kibana/dashboard.ndjson:/dashboard.ndjson
#     command: ["/bin/sh", "/setup-dashboard.sh"]
#     depends_on:
#       - kibana
#     env_file:
#       - .env
#     networks:
#       - pong

volumes:
  postgres_data:
    driver: local
    name: postgres_data
    driver_opts:
      type: none
      o: bind
      device: $PWD/srcs/postgres/
  front_data:
    driver: local
    name: front_data
    driver_opts:
      type: none
      o: bind
      device: $PWD/srcs/frontend/
  elasticsearch_data:
    name: elasticsearch_data
  grafana_data:
    name: grafana_data
  prometheus_data:
    name: prometheus_data

networks:
  pong:
    name: pong
    driver: bridge
